{"version":3,"sources":["./src/app/idealz/services/api/api.service.ts","./src/app/idealz/services/common/common.service.ts","./src/app/idealz/services/url/url.service.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpEventType, HttpHeaders } from \"@angular/common/http\";\r\nimport { UrlService } from \"../url/url.service\";\r\nimport { LoginBody } from \"../../requests/login-body\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { CommonService } from \"../common/common.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class ApiService {\r\n  countryCode: any;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private url: UrlService,\r\n    private comm: CommonService\r\n  ) {\r\n    this.getCountryCode();\r\n  }\r\n\r\n  getCountryCode() {\r\n    return this.http\r\n      .get<Response>(\"assets/json/countryCode.json\")\r\n      .pipe(map(response => response));\r\n  }\r\n\r\n  singIn(body: LoginBody) {\r\n    return this.http.post(this.comm.baseUrl + \"/panel/login\", body);\r\n  }\r\n\r\n  sendToken(token: string) {\r\n    localStorage.setItem(\"token\", token);\r\n  }\r\n  getToken() {\r\n    return localStorage.getItem(\"token\");\r\n  }\r\n\r\n  isLoggedIn() {\r\n    return this.getToken() !== null;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\nimport { ToastrManager } from \"ng6-toastr-notifications\";\r\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class CommonService {\r\n  orderStatus: string = \"pending\";\r\n  dropSetting = {\r\n    enableCheckAll: false,\r\n    singleSelection: false,\r\n    idField: \"_id\",\r\n    textField: \"name\",\r\n    selectAllText: \"Select All\",\r\n    unSelectAllText: \"UnSelect All\",\r\n    itemsShowLimit: 3,\r\n    allowSearchFilter: true\r\n  };\r\n  singleDropSetting = {\r\n    enableCheckAll: false,\r\n    singleSelection: true,\r\n    idField: \"_id\",\r\n    textField: \"name\",\r\n    selectAllText: \"Select All\",\r\n    unSelectAllText: \"UnSelect All\",\r\n    itemsShowLimit: 3,\r\n    allowSearchFilter: true\r\n  };\r\n  baseUrl = \"https://appgrowthcompany.com:3000/v1/admin\";\r\n  imageUrl = \"https://appgrowthcompany.com:3000\";\r\n  // https://appgrowthcompany.com:3000/\r\n  //http://192.168.1.98:3000\r\n  constructor(\r\n    private spinner: NgxSpinnerService,\r\n    private toaster: ToastrManager,\r\n    // private api: ApiService,\r\n    private http: HttpClient\r\n  ) { }\r\n  showSpinner() {\r\n    this.spinner.show();\r\n  }\r\n  hideSpinner() {\r\n    this.spinner.hide();\r\n  }\r\n  successToast(message) {\r\n    this.toaster.successToastr(message, \"\", {\r\n      maxShown: 1\r\n    });\r\n  }\r\n  errorToast(message) {\r\n    this.toaster.errorToastr(message);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class UrlService {\r\n  baseUrl = \"http://192.168.1.98:3000/v1/admin\";\r\n  imageUrl = \"http://192.168.1.98:3000\";\r\n\r\n  constructor() {}\r\n  login = `${this.baseUrl}/login`;\r\n}\r\n"],"sourceRoot":"webpack:///"}